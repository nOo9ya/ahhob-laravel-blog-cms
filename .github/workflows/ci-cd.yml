name: Ahhob Laravel Blog CMS CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.3]
        node-version: [20]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, gd, redis, zip
          coverage: xdebug
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: src/package-lock.json
          
      - name: Copy environment file
        run: cp src/.env.example src/.env
        
      - name: Install PHP dependencies
        run: |
          cd src
          composer install --no-progress --prefer-dist --optimize-autoloader
          
      - name: Install Node dependencies
        run: |
          cd src
          npm ci
          
      - name: Generate application key
        run: |
          cd src
          php artisan key:generate
          
      - name: Generate JWT secret
        run: |
          cd src
          php -r "echo 'JWT_SECRET=' . base64_encode(random_bytes(32)) . PHP_EOL;" >> .env
          
      - name: Create SQLite database
        run: |
          cd src
          touch database/database.sqlite
          
      - name: Run database migrations
        run: |
          cd src
          php artisan migrate --force
          
      - name: Build frontend assets
        run: |
          cd src
          npm run build
          
      - name: Run PHP unit tests
        run: |
          cd src
          vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml
          
      - name: Run PHP feature tests
        run: |
          cd src
          vendor/bin/phpunit --testsuite=Feature
          
      - name: Run JWT specific tests
        run: |
          cd src
          vendor/bin/phpunit --filter=Jwt
          
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: src/coverage.xml
          flags: unittests
          name: codecov-umbrella
          
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          
      - name: Install PHP dependencies
        run: |
          cd src
          composer install --no-dev --optimize-autoloader
          
      - name: Run security audit
        run: |
          cd src
          composer audit
          
      - name: Check for vulnerable dependencies
        run: |
          cd src
          composer require --dev roave/security-advisories:dev-latest || echo "Security advisories check completed"
          
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          
      - name: Install PHP dependencies
        run: |
          cd src
          composer install --no-progress --prefer-dist
          
      - name: Run Laravel Pint (Code Style)
        run: |
          cd src
          vendor/bin/pint --test
          
      - name: Check PHP syntax
        run: |
          cd src
          find . -name "*.php" -not -path "./vendor/*" -not -path "./node_modules/*" | xargs -I {} php -l {}
          
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        
      - name: Build and push Docker images
        run: |
          # Determine tag based on branch
          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            TAG="latest"
          else
            TAG="develop"
          fi
          
          # Build PHP image
          docker build -f .docker/php/8.3/Dockerfile -t ahhob/blog-cms-php:$TAG .
          docker push ahhob/blog-cms-php:$TAG
          
          # Build Nginx image
          docker build -f .docker/nginx/Dockerfile -t ahhob/blog-cms-nginx:$TAG .
          docker push ahhob/blog-cms-nginx:$TAG
          
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /var/www/ahhob-blog-staging
            git pull origin develop
            docker-compose pull
            docker-compose up -d
            docker-compose exec -T php php artisan migrate --force
            docker-compose exec -T php php artisan config:cache
            docker-compose exec -T php php artisan route:cache
            docker-compose exec -T php php artisan view:cache
            
      - name: Health check
        run: |
          sleep 30
          curl -f ${{ secrets.STAGING_URL }}/health || exit 1
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create deployment backup
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /var/www/ahhob-blog-production
            ./scripts/deploy.sh --env production --skip-tests
            
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /var/www/ahhob-blog-production
            git fetch --tags
            git checkout ${{ github.event.release.tag_name }}
            docker-compose -f docker-compose.production.yml pull
            docker-compose -f docker-compose.production.yml up -d
            docker-compose exec -T php php artisan migrate --force
            docker-compose exec -T php php artisan config:cache
            docker-compose exec -T php php artisan route:cache
            docker-compose exec -T php php artisan view:cache
            docker-compose exec -T php php artisan queue:restart
            
      - name: Production health check
        run: |
          sleep 60
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
          
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '🚀 Production deployment successful for version ${{ github.event.release.tag_name }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()
        
      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '❌ Production deployment failed for version ${{ github.event.release.tag_name }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()
        
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js for Lighthouse
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
        
      - name: Run Lighthouse CI
        run: |
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: Load testing with Apache Bench
        run: |
          # Install Apache Bench
          sudo apt-get update
          sudo apt-get install -y apache2-utils
          
          # Run load test
          ab -n 100 -c 10 ${{ secrets.STAGING_URL }}/ > load_test_results.txt
          cat load_test_results.txt
          
  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, security, lint]
    if: always()
    
    steps:
      - name: Notify on success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#ci-cd'
          text: '✅ CI/CD pipeline completed successfully for ${{ github.ref }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ needs.test.result == 'success' && needs.security.result == 'success' && needs.lint.result == 'success' }}
        
      - name: Notify on failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
          text: '❌ CI/CD pipeline failed for ${{ github.ref }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' || needs.lint.result == 'failure' }}
